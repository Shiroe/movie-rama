import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useQuery } from 'react-query';

import type { Movie, MOVIES_RESPONSE } from './api/movies';
import type { GENRE } from './api/genres';
import MovieCard from 'src/components/MovieCard';
import Navigation from 'src/Navigation';

type FETCH_PARAMS = {
  page: number;
  search?: string;
};
const fetcher = async (url: string, params: FETCH_PARAMS) => {
  const { page = 1, search = '' } = params;
  const paramsToPass = url.includes('genres') ? {} : { page, search };
  return await fetch(url, {
    method: 'POST',
    body: JSON.stringify(paramsToPass),
  }).then((res) => res.json());
};

type MOVIE_ENDPOINTS = 'now_playing' | 'movies';

const Home = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [search, setSearch] = useState<string>('');
  const [expandedMovieId, setExpandedMovieId] = useState<number>(-1);

  const [movieEndpoint, setMovieEndpoint] =
    useState<MOVIE_ENDPOINTS>('now_playing');
  const [movies, setMovies] = useState<Movie[] | null>(null);

  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [totalResults, setTotalResults] = useState<number>(1);

  const [scrollPos, setScrollPos] = useState<number>(0);
  const [viewportHeight, setViewportHeight] = useState<number>(0);

  const {
    isLoading: isGenresLoading,
    error: genresError,
    data: genresData,
  } = useQuery(['genres', { currentPage }], () =>
    fetcher('/api/genres', { page: currentPage })
  );

  const {
    isLoading: isMoviesLoading,
    error: moviesError,
    data: moviesData,
  } = useQuery(
    [movieEndpoint, currentPage, search],
    () => fetcher(`/api/${movieEndpoint}`, { page: currentPage, search }),
    {
      onSuccess(data: MOVIES_RESPONSE) {
        console.log('QUERY RES: ', data);
        if (currentPage === 1) {
          setMovies(data.results);
        } else if (currentPage > 1 && movies) {
          if (
            movies[movies.length - 1]?.id !==
            data.results[data.results.length - 1]?.id
          ) {
            setMovies([...movies, ...data.results]);
          }
        }
        setTotalPages(data.total_pages);
        setTotalResults(data.total_results);
      },
    }
  );

  useEffect(() => {
    setCurrentPage(1);
    setExpandedMovieId(-1);

    if (search.length > 0 && movieEndpoint === 'movies') return; 

    if (search.length === 0) {
      setMovieEndpoint('now_playing');
    } else {
      setMovieEndpoint('movies');
    }
  }, [search, movieEndpoint]);

  useEffect(() => {
    const updateScrollPosition = () => {
      const currentPosition = window.scrollY;
      const scrollHeight = document.body.scrollHeight - window.innerHeight;

      setScrollPos(currentPosition);
      setViewportHeight(window.screen.height);

      if (Math.abs(Math.ceil(scrollHeight) - Math.ceil(currentPosition)) <= 3) {
        if (currentPage >= totalPages) return;
        setCurrentPage(currentPage + 1);
      }
    };

    window.addEventListener('scroll', updateScrollPosition);

    return () => {
      window.removeEventListener('scroll', updateScrollPosition);
    };
  });

  const onMovieExpand = (movieId: number): void => {
    if (expandedMovieId === movieId) {
      setExpandedMovieId(-1)
    } else {
      setExpandedMovieId(movieId);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen w-full bg-gray-800">
        <Navigation />
        <section className="mx-auto flex w-full items-end justify-center border-b border-b-emerald-900 bg-gray-900 py-5 text-center sm:py-10">
          <div className="w-full max-w-7xl px-4">
            <input
              type="text"
              value={search}
              onChange={(ev) => setSearch(ev.target.value)}
              placeholder="Search for a title"
              className="w-full rounded border border-emerald-300 bg-gray-700 px-4 py-2 text-lg text-emerald-300 focus:outline-none sm:w-4/5 md:w-2/3 lg:w-2/3 xl:w-1/2"
            />
          </div>
        </section>
        <section className="">
          <div
            className={`
              mx-auto grid max-w-7xl grid-cols-1 gap-5 bg-gray-700 p-5 pt-10
              sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 
            `}
          >
            {movies?.map((movie) => {
              return (
                <MovieCard
                  key={movie.id}
                  movie={movie}
                  genres={genresData?.genres as GENRE[]}
                  isExpanded={expandedMovieId === movie.id}
                  onClick={onMovieExpand}
                />
              );
            })}
            {(isMoviesLoading || isGenresLoading) && (
              <h3 className="col-span-4 text-center">Loading...</h3>
            )}
          </div>
          {scrollPos > viewportHeight && (
            <div
              className="fixed right-0.5 bottom-5 flex h-10 w-10 items-center cursor-pointer justify-center rounded-full border-2 border-yellow-300 bg-emerald-500 text-base font-semibold text-gray-900"
              onClick={() => window.scrollTo({ top: 0 })}
            >
              TOP
            </div>
          )}
        </section>
      </main>
    </>
  );
};

export default Home;
