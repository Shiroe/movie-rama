import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import type { Movie, NOW_PLAYING_RESPONSE } from './api/now_playing';
import type { GENRE, GENRES_RESPONSE } from './api/genres';

const Home = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [search, setSearch] = useState<string>('');

  const [movies, setMovies] = useState<Movie[] | null>(null);
  const [genres, setGenres] = useState<GENRE[] | null>(null);

  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [totalResults, setTotalResults] = useState<number>(1);

  // useEffect(() => {
  //   const updateLoadedData = () => {
  //     const currentPosition = window.scrollY;
  //     const scrollHeight = document.body.scrollHeight - window.innerHeight;
      
  //     if (Math.abs(Math.ceil(scrollHeight) - Math.ceil(currentPosition)) <= 3) {
  //       setLoadedDataIndex(loadedDataIndex + perPage);
  //       window.scrollTo({ top: scrollHeight })
  //     }
  //     console.log('scrolled', scrollHeight, ' : ', currentPosition);
  //   }

  //   window.addEventListener('scroll', updateLoadedData);

  //   return () => {
  //     window.removeEventListener('scroll', updateLoadedData);
  //   }
  // })

  useEffect(() => {
    if (!genres) {
      fetchGenres();
    }
  }, [genres])

  useEffect(() => {
    if (!movies) {
      fetchMoviesNow();
    }
  }, [movies])

  const fetchMoviesNow = async () => {
    const res = await fetch('/api/now_playing');
    const { results, page, dates, total_pages, total_results }: NOW_PLAYING_RESPONSE = await res.json();
    console.log('DATA:', results);
    setCurrentPage(page);
    setTotalPages(total_pages);
    setTotalResults(total_results);
    setMovies(results);
  }

  const fetchGenres = async () => {
    const res = await fetch('/api/genres');
    const { genres }: GENRES_RESPONSE = await res.json();
    setGenres(genres);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen w-full bg-gray-800">
        <nav className="w-full bg-gray-900 py-2">
          <h1 className="mx-auto text-center text-emerald-500 lg:text-3xl xl:text-4xl">
            MovieRama
          </h1>
        </nav>
        <section className="mx-auto flex w-full items-end justify-center border-b border-b-emerald-900 bg-gray-900 py-5 text-center sm:py-10">
          <div className="w-full max-w-7xl px-4">
            <input
              type="text"
              value={search}
              onChange={(ev) => setSearch(ev.target.value)}
              placeholder="Search for a title"
              className="w-full rounded border border-emerald-300 bg-gray-700 px-4 py-2 text-lg text-emerald-300 focus:outline-none sm:w-4/5 md:w-2/3 lg:w-2/3 xl:w-1/2"
            />
          </div>
        </section>
        <section className="">
          <div
            className={`
              mx-auto grid max-w-7xl grid-cols-1 gap-5 bg-gray-700 p-5 pt-10
              sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 
            `}
          >
            {movies && movies.filter(m => m.title.toLowerCase().includes(search.toLowerCase())).map((movie) => {
              return (
                <div
                  key={movie.id}
                  className="flex flex-col justify-between rounded border-2 border-emerald-400 bg-emerald-700 relative"
                >
                  <Image
                    src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}
                    width={720}
                    height={300}
                    alt="movie image"
                    // className="flex-grow"
                  />
                  <div className="flex flex-wrap justify-start gap-1 p-1 absolute top-0 left-0 right-0">
                    {movie.genre_ids.map((g) => (
                      <span
                        key={g}
                        className="rounded border border-emerald-400 p-1 text-sm font-semibold text-gray-800 bg-emerald-300 bg-opacity-100"
                      >
                        {genres?.filter(gen => gen.id === g)[0]?.name}
                      </span>
                    ))}
                  </div>
                  <div className="bg-emerald-500 py-1 text-center text-base text-gray-900">
                    <span className=''>
                      {new Date(movie.release_date).toLocaleDateString()}
                    </span>
                    <br />
                    <span className='font-semibold'>
                      {movie.title}
                    </span>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      </main>
    </>
  );
};

export default Home;
